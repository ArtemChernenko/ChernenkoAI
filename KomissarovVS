# __Инструкция по написанию текстов в MrakDown!__

## __Выделение текстов__

В MarkDown есть несколько различных способов выделить текст. 

Например, Вы можете обрамить слово (или кусок текста) звездочками (*) или нижним подчеркиванием (_) и тогда он будет написан курсивом - *вот так* или _вот так_.

Также вы можете выделить текст полужирным шрифтом, для этого необходимо обрамить текст двойными звездочками (**) или двойными подчеркиванием (__) - **полужирный текст** или __полужирный текст__.

Мы можем комбинировать разные способы выделения полужирным и курсивом. Например, вот так - _Курсивный и одновременно **полужирный текст**_.

## __Работа со списками__

Списки выбают нумерованными и ненумерованными. Если нам нужен нумерованный список, то мы просто пишем каждый элемент со своим номером на новой строке, а MarkDown сам его красиво оформит. Например, вот так:
1. первый элемент.
2. второй элемент.
3. третий элемент.

Если нам нужны ненумерованные списки, то мы вместо числа (номера элемента) можем поставить +. Например, вот так:
+ элемент.
+ элемент.

## __Картинки в тексте__

Чтобы добавить картинку в текст необходимо использовать следующий синтаксис - ставим восклицательный знак, потом в квадратных скобках указываем текст, а в круглых - адрес файла с картинкой. Адрес относительный или абсолютный. 
Например, вот так:
![Привет, это Аноним](dvoichnyj_kod_kod_tsifry_147523_3840x2400.jpg)

## __Ссылки в текста__

* Ссылка на [GitHub](https://github.com/)

## __Таблицы__
* В доработке.

## __Заголовки__
* Заголовки пишем через #

# __Краткое руководство по git!__

## __Основные комманды__
* __git init__ - создает локальный репозиторий.
* __git commit__ - создает коммит (комментарий к файлу).
* __git add__ - добавляем файл и отслеживаем (-a в *git commit -am""* - делает тоже самое).
* __git log__ - посмотреть журнал коммитов.
* __git checkout__ - переместится в другую версию сохранений коммитов.
* __git diff__ - вывод разницы между коммитами, коммитом и рабочим .каталогом.
* __git status__ - вывод состояния рабочего каталога.
* __git commit --amend__ — изменить последний коммит.

## __Ветви и слияние__

* __git branch__ - вывод список веток.
* __git branch new_branch__ - создать новую ветоку с именем *new_branch*.
* __git checkout new_branch__ - переходим на другую ветку branch_name.
* __git branch -b new_branch__ - создать и переместится в новую ветоку с именем *new_branch* .
* __git branch -d new_branch__ - удаляем слитую ветоку с именем *new_branch*.
* __git branch -D new_branch__ - удаляем не слитую ветку с именем *new_branch*.
* __git log -graph__ -  выводит список коммитов в виде красивого графа/дерева.
* __git merge branch_name__ - сливает ветку *branch_name* с текущей веткой.

## __Создание клона и для совместной работы и обновлению проектов__

* __git clone__ - клонирует удаленный репозиторий и создает локальную копию на вашем компьютере.
* __git fetch__ - извлекает изменения из удаленного репозитория и обновляет ваши локальные указатели ветвей.
* __git pull__ - извлекает изменения из удаленного репозитория и объединяет их с вашей локальной веткой.
* __git push__ - отправляет изменения из вашей локальной ветки в удаленный репозиторий.
* __git remote__ - показывает список всех удаленных репозиториев, о которых знает Git.
* __git remote add__ - добавляет новый удаленный репозиторий.
* __git remote remove__ - удаляет существующий удаленный репозиторий.
* __git remote rename__ - переименовывает существующий удаленный репозиторий.
* __git remote show__ - показывает информацию о конкретном удаленном репозитории.